t4dLoadFile "$WS_ROOT/_t4d_/dependencies.env"
t4dLoadFile "$WS_ROOT/_t4d_/configure-utils.env"
t4dLoadFile "$WS_ROOT/_t4d_/t4d-utils.env"

alias wkt='wks all'

_wksBuild(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.1
_t4dDebugInfoStart "_wksBuild" "$#" "$@"
#cat &>/dev/null << EOF
###### _wksBuild
#   - Name :
#       wksBuild
###
#   - Synopsis :
#       Build Step
###
#   - Definition:
#
###
#   - Usage :
#
###
#   - Available Options :
#       -p              = oui
#       -build          = test
#       -toto           = non
#
###
#   - Example :
#
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########


    local CHPWD=1
    local _BuildLog="${plpurple}[BUILD]${pstd}"
    source $WS_BUILD_CONFIG_FILE

    _wksConfigureStatus  "$WS_PREFIX"

    cd "$WS_BOOTSTRAP_DIR"

    _t4dDebugLog   "$_BuildLog" "make -j8"
        #No Silent Output
        ( make -j8 ) 
    
    _t4dDebugLog   "$_BuildLog" "make install"
        #Silent Output
        ( make install ) &> $WS_LOGFILE
        rm $WS_LOGFILE

    _t4dDebugLog   "${plgreen}[BUILD]${pstd}" "Build Step Succeeded"

###############################
_t4dDebugInfoEnd "_wksBuild" "$@"
}

_wksAllInOne(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.1
_t4dDebugInfoStart "_wksAllInOne" "$#" "$@"
#cat &>/dev/null << EOF
###### _wksAllInOne
#   - Name :
#       _wksAllInOne
###
#   - Synopsis :
#       Exec Configure + Build Steps
###
#   - Definition:
#
###
#   - Usage :
#
###
#   - Available Options :
#       ploup
#
###
#   - Example :
#
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########

    _wksConfigure ${@}
    _wksBuild

###############################
_t4dDebugInfoEnd "_wksAllInOne" "$@"
}

_wksConfigure(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.1
_t4dDebugInfoStart "_wksConfigure" "$#" "$@"
#cat &>/dev/null << EOF
###### _wksConfigure
#   - Name :
#       wksConfigure
###
#   - Synopsis :
#       Configure Step
###
#   - Definition:
#
###
#   - Usage :
#
###
#   - Available Options :
#
###
#   - Example :
#
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########

    local CHPWD=1
    local skipClean="false"
    local statusOnly="false"

    while [[ "$@" != "" ]]; do
        case $1 in
            -no-clean)
                skipClean="true"
                shift
            ;;
            -status)
                statusOnly="true"
                shift
            ;;
            *)
                shift
            ;;
        esac
    done

    if [[ "$statusOnly" == "true" ]]; then
        _wksConfigureStatus  CMAKE $CMAKE_BUILD_TARGET
        return 0
    fi

    local propertyFile="${WS_ROOT}/_t4d_/targets/$WS_HOST_TYPE-$CMAKE_BUILD_TARGET.properties"

    if [[ -e "$propertyFile" ]]; then
        source "${propertyFile}"
    else
        echo "${plred}[_wksConfigure]${pstd} Unsuported Target ${plyellow}${CMAKE_BUILD_TARGET}${pstd} On Host ${plyellow}${WS_HOST_TYPE}${pstd}" > $WS_LOGFILE
        return 1
    fi

    export WS_EXPORT_NAME="${CMAKE_BUILD_TARGET}/${CMAKE_BUILD_TARGET_ARCH}/${WS_SRC_VERSION}_${WS_BUILD_DATE}"
    export CMAKE_INSTALL_OPT_PATH="${WS_SYMLINK_PREFIX}/${WS_EXPORT_PREFIX}/${CMAKE_BUILD_TARGET}/${CMAKE_BUILD_TARGET_ARCH}"
    export WS_EXPORT_TARFILE="${WS_EXPORT_PREFIX}_$(echo ${WS_EXPORT_NAME} | sed 's|/|_|g').${WS_HOST_TYPE}.${WS_SHA:0:7}.tar"
    export WS_INSTALL_DIR="$WS_INSTALL_PREFIX/$WS_EXPORT_NAME"

    _wksUpdateConfigFile "$WS_PREFIX"
    _wksConfigureStatus "$WS_PREFIX"

    if [[ "$skipClean" != "true" ]]; then
        _wksClean
    fi

    _wksSimLink

    _wksBootstrap

    _t4dDebugLog   "${plgreen}[CONFIGURE]${pstd}" "Configure Step Succeeded"

###############################
_t4dDebugInfoEnd "_wksConfigure" "$@"
}
